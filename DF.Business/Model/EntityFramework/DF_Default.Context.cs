//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DF.Business.Model.EntityFramework
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DF_DefaultEntities : DbContext
    {
        public DF_DefaultEntities()
            : base("name=DF_DefaultEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CompanyType> CompanyTypes { get; set; }
        public virtual DbSet<Custom_Manage_Master> Custom_Manage_Master { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Folder> Folders { get; set; }
        public virtual DbSet<PublicDocument> PublicDocuments { get; set; }
        public virtual DbSet<SharedDocumnet> SharedDocumnets { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Custom_Value_Master> Custom_Value_Master { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int CREATE_NEW_DATABASE(string nEW_DATABASE_NAME)
        {
            var nEW_DATABASE_NAMEParameter = nEW_DATABASE_NAME != null ?
                new ObjectParameter("NEW_DATABASE_NAME", nEW_DATABASE_NAME) :
                new ObjectParameter("NEW_DATABASE_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CREATE_NEW_DATABASE", nEW_DATABASE_NAMEParameter);
        }
    
        public virtual int CRM_CheckifUserExists(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_CheckifUserExists", usernameParameter, passwordParameter);
        }
    
        public virtual int CRM_Getclients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_Getclients");
        }
    
        public virtual int CRM_GetLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_GetLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int crm_GetOpportunityDetail(Nullable<decimal> leadID)
        {
            var leadIDParameter = leadID.HasValue ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crm_GetOpportunityDetail", leadIDParameter);
        }
    
        public virtual int CRM_InsertClientDetails(string clientID, string clientName, string companytype, string country, string address1, string address2, string city, string companywebsite, byte[] connectionString, string serverName, string companyLogo)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var companytypeParameter = companytype != null ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(byte[]));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_InsertClientDetails", clientIDParameter, clientNameParameter, companytypeParameter, countryParameter, address1Parameter, address2Parameter, cityParameter, companywebsiteParameter, connectionStringParameter, serverNameParameter, companyLogoParameter);
        }
    
        public virtual int crm_InsertOpportunityDetail(string lead_Name, string title, string phone, string fax, string email, string mobile, string preferTime, string preferMode, string emailOptOut, string accountId, string accountName, string webSite, string ownership, string employees, string industry, string annualRevenue, string rating, string leadStatus, string currentApplication, string mailingAddress, string mailingstreet, string mailingcity, string mailingstate, string mailingzip, string mailingcountry, string salesMgr1, string salesMgr2, string office, Nullable<long> createdBy, Nullable<long> modifiedBy, string description, string source, Nullable<long> leadAssigned, string leadStage, string facebookUserName, string twitterUserName, string linkedInUserName, string googlePlusUserName, string pInterestUserName, string skypeUsername, Nullable<System.DateTime> estimatedCloseDate, string nextStep, string probability, string businessType)
        {
            var lead_NameParameter = lead_Name != null ?
                new ObjectParameter("Lead_Name", lead_Name) :
                new ObjectParameter("Lead_Name", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var preferTimeParameter = preferTime != null ?
                new ObjectParameter("PreferTime", preferTime) :
                new ObjectParameter("PreferTime", typeof(string));
    
            var preferModeParameter = preferMode != null ?
                new ObjectParameter("PreferMode", preferMode) :
                new ObjectParameter("PreferMode", typeof(string));
    
            var emailOptOutParameter = emailOptOut != null ?
                new ObjectParameter("EmailOptOut", emailOptOut) :
                new ObjectParameter("EmailOptOut", typeof(string));
    
            var accountIdParameter = accountId != null ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("webSite", webSite) :
                new ObjectParameter("webSite", typeof(string));
    
            var ownershipParameter = ownership != null ?
                new ObjectParameter("Ownership", ownership) :
                new ObjectParameter("Ownership", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var annualRevenueParameter = annualRevenue != null ?
                new ObjectParameter("AnnualRevenue", annualRevenue) :
                new ObjectParameter("AnnualRevenue", typeof(string));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            var leadStatusParameter = leadStatus != null ?
                new ObjectParameter("LeadStatus", leadStatus) :
                new ObjectParameter("LeadStatus", typeof(string));
    
            var currentApplicationParameter = currentApplication != null ?
                new ObjectParameter("CurrentApplication", currentApplication) :
                new ObjectParameter("CurrentApplication", typeof(string));
    
            var mailingAddressParameter = mailingAddress != null ?
                new ObjectParameter("mailingAddress", mailingAddress) :
                new ObjectParameter("mailingAddress", typeof(string));
    
            var mailingstreetParameter = mailingstreet != null ?
                new ObjectParameter("mailingstreet", mailingstreet) :
                new ObjectParameter("mailingstreet", typeof(string));
    
            var mailingcityParameter = mailingcity != null ?
                new ObjectParameter("mailingcity", mailingcity) :
                new ObjectParameter("mailingcity", typeof(string));
    
            var mailingstateParameter = mailingstate != null ?
                new ObjectParameter("mailingstate", mailingstate) :
                new ObjectParameter("mailingstate", typeof(string));
    
            var mailingzipParameter = mailingzip != null ?
                new ObjectParameter("mailingzip", mailingzip) :
                new ObjectParameter("mailingzip", typeof(string));
    
            var mailingcountryParameter = mailingcountry != null ?
                new ObjectParameter("mailingcountry", mailingcountry) :
                new ObjectParameter("mailingcountry", typeof(string));
    
            var salesMgr1Parameter = salesMgr1 != null ?
                new ObjectParameter("salesMgr1", salesMgr1) :
                new ObjectParameter("salesMgr1", typeof(string));
    
            var salesMgr2Parameter = salesMgr2 != null ?
                new ObjectParameter("salesMgr2", salesMgr2) :
                new ObjectParameter("salesMgr2", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var leadAssignedParameter = leadAssigned.HasValue ?
                new ObjectParameter("LeadAssigned", leadAssigned) :
                new ObjectParameter("LeadAssigned", typeof(long));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            var facebookUserNameParameter = facebookUserName != null ?
                new ObjectParameter("FacebookUserName", facebookUserName) :
                new ObjectParameter("FacebookUserName", typeof(string));
    
            var twitterUserNameParameter = twitterUserName != null ?
                new ObjectParameter("TwitterUserName", twitterUserName) :
                new ObjectParameter("TwitterUserName", typeof(string));
    
            var linkedInUserNameParameter = linkedInUserName != null ?
                new ObjectParameter("LinkedInUserName", linkedInUserName) :
                new ObjectParameter("LinkedInUserName", typeof(string));
    
            var googlePlusUserNameParameter = googlePlusUserName != null ?
                new ObjectParameter("GooglePlusUserName", googlePlusUserName) :
                new ObjectParameter("GooglePlusUserName", typeof(string));
    
            var pInterestUserNameParameter = pInterestUserName != null ?
                new ObjectParameter("PInterestUserName", pInterestUserName) :
                new ObjectParameter("PInterestUserName", typeof(string));
    
            var skypeUsernameParameter = skypeUsername != null ?
                new ObjectParameter("SkypeUsername", skypeUsername) :
                new ObjectParameter("SkypeUsername", typeof(string));
    
            var estimatedCloseDateParameter = estimatedCloseDate.HasValue ?
                new ObjectParameter("EstimatedCloseDate", estimatedCloseDate) :
                new ObjectParameter("EstimatedCloseDate", typeof(System.DateTime));
    
            var nextStepParameter = nextStep != null ?
                new ObjectParameter("NextStep", nextStep) :
                new ObjectParameter("NextStep", typeof(string));
    
            var probabilityParameter = probability != null ?
                new ObjectParameter("Probability", probability) :
                new ObjectParameter("Probability", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crm_InsertOpportunityDetail", lead_NameParameter, titleParameter, phoneParameter, faxParameter, emailParameter, mobileParameter, preferTimeParameter, preferModeParameter, emailOptOutParameter, accountIdParameter, accountNameParameter, webSiteParameter, ownershipParameter, employeesParameter, industryParameter, annualRevenueParameter, ratingParameter, leadStatusParameter, currentApplicationParameter, mailingAddressParameter, mailingstreetParameter, mailingcityParameter, mailingstateParameter, mailingzipParameter, mailingcountryParameter, salesMgr1Parameter, salesMgr2Parameter, officeParameter, createdByParameter, modifiedByParameter, descriptionParameter, sourceParameter, leadAssignedParameter, leadStageParameter, facebookUserNameParameter, twitterUserNameParameter, linkedInUserNameParameter, googlePlusUserNameParameter, pInterestUserNameParameter, skypeUsernameParameter, estimatedCloseDateParameter, nextStepParameter, probabilityParameter, businessTypeParameter);
        }
    
        public virtual int CRM_SaveExtContactDetails(string fName, string email, ObjectParameter isExists)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_SaveExtContactDetails", fNameParameter, emailParameter, isExists);
        }
    
        public virtual int CRM_UpdateClientDetailsByClientId(string clientID, string clientName, string companytype, string country, string address1, string address2, string city, string companyLogo, string companywebsite)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var companytypeParameter = companytype != null ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var companyLogoParameter = companyLogo != null ?
                new ObjectParameter("CompanyLogo", companyLogo) :
                new ObjectParameter("CompanyLogo", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRM_UpdateClientDetailsByClientId", clientIDParameter, clientNameParameter, companytypeParameter, countryParameter, address1Parameter, address2Parameter, cityParameter, companyLogoParameter, companywebsiteParameter);
        }
    
        public virtual int crm_UpdateOpportunityDetail(string leadID, string lead_Name, string title, string phone, string fax, string email, string mobile, string preferTime, string preferMode, string emailOptOut, string accountId, string accountName, string webSite, string ownership, string employees, string industry, string annualRevenue, string rating, string leadStatus, string currentApplication, string mailingAddress, string mailingstreet, string mailingcity, string mailingstate, string mailingzip, string mailingcountry, string salesMgr1, string salesMgr2, string office, Nullable<long> modifiedBy, string description, string source, Nullable<long> leadAssigned, string leadStage, string facebookUserName, string twitterUserName, string linkedInUserName, string googlePlusUserName, string pInterestUserName, string skypeUsername, Nullable<System.DateTime> estimatedCloseDate, string nextStep, string probability, string businessType)
        {
            var leadIDParameter = leadID != null ?
                new ObjectParameter("LeadID", leadID) :
                new ObjectParameter("LeadID", typeof(string));
    
            var lead_NameParameter = lead_Name != null ?
                new ObjectParameter("Lead_Name", lead_Name) :
                new ObjectParameter("Lead_Name", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var preferTimeParameter = preferTime != null ?
                new ObjectParameter("PreferTime", preferTime) :
                new ObjectParameter("PreferTime", typeof(string));
    
            var preferModeParameter = preferMode != null ?
                new ObjectParameter("PreferMode", preferMode) :
                new ObjectParameter("PreferMode", typeof(string));
    
            var emailOptOutParameter = emailOptOut != null ?
                new ObjectParameter("EmailOptOut", emailOptOut) :
                new ObjectParameter("EmailOptOut", typeof(string));
    
            var accountIdParameter = accountId != null ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(string));
    
            var accountNameParameter = accountName != null ?
                new ObjectParameter("AccountName", accountName) :
                new ObjectParameter("AccountName", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("webSite", webSite) :
                new ObjectParameter("webSite", typeof(string));
    
            var ownershipParameter = ownership != null ?
                new ObjectParameter("Ownership", ownership) :
                new ObjectParameter("Ownership", typeof(string));
    
            var employeesParameter = employees != null ?
                new ObjectParameter("Employees", employees) :
                new ObjectParameter("Employees", typeof(string));
    
            var industryParameter = industry != null ?
                new ObjectParameter("Industry", industry) :
                new ObjectParameter("Industry", typeof(string));
    
            var annualRevenueParameter = annualRevenue != null ?
                new ObjectParameter("AnnualRevenue", annualRevenue) :
                new ObjectParameter("AnnualRevenue", typeof(string));
    
            var ratingParameter = rating != null ?
                new ObjectParameter("Rating", rating) :
                new ObjectParameter("Rating", typeof(string));
    
            var leadStatusParameter = leadStatus != null ?
                new ObjectParameter("LeadStatus", leadStatus) :
                new ObjectParameter("LeadStatus", typeof(string));
    
            var currentApplicationParameter = currentApplication != null ?
                new ObjectParameter("CurrentApplication", currentApplication) :
                new ObjectParameter("CurrentApplication", typeof(string));
    
            var mailingAddressParameter = mailingAddress != null ?
                new ObjectParameter("mailingAddress", mailingAddress) :
                new ObjectParameter("mailingAddress", typeof(string));
    
            var mailingstreetParameter = mailingstreet != null ?
                new ObjectParameter("mailingstreet", mailingstreet) :
                new ObjectParameter("mailingstreet", typeof(string));
    
            var mailingcityParameter = mailingcity != null ?
                new ObjectParameter("mailingcity", mailingcity) :
                new ObjectParameter("mailingcity", typeof(string));
    
            var mailingstateParameter = mailingstate != null ?
                new ObjectParameter("mailingstate", mailingstate) :
                new ObjectParameter("mailingstate", typeof(string));
    
            var mailingzipParameter = mailingzip != null ?
                new ObjectParameter("mailingzip", mailingzip) :
                new ObjectParameter("mailingzip", typeof(string));
    
            var mailingcountryParameter = mailingcountry != null ?
                new ObjectParameter("mailingcountry", mailingcountry) :
                new ObjectParameter("mailingcountry", typeof(string));
    
            var salesMgr1Parameter = salesMgr1 != null ?
                new ObjectParameter("salesMgr1", salesMgr1) :
                new ObjectParameter("salesMgr1", typeof(string));
    
            var salesMgr2Parameter = salesMgr2 != null ?
                new ObjectParameter("salesMgr2", salesMgr2) :
                new ObjectParameter("salesMgr2", typeof(string));
    
            var officeParameter = office != null ?
                new ObjectParameter("office", office) :
                new ObjectParameter("office", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var leadAssignedParameter = leadAssigned.HasValue ?
                new ObjectParameter("LeadAssigned", leadAssigned) :
                new ObjectParameter("LeadAssigned", typeof(long));
    
            var leadStageParameter = leadStage != null ?
                new ObjectParameter("LeadStage", leadStage) :
                new ObjectParameter("LeadStage", typeof(string));
    
            var facebookUserNameParameter = facebookUserName != null ?
                new ObjectParameter("FacebookUserName", facebookUserName) :
                new ObjectParameter("FacebookUserName", typeof(string));
    
            var twitterUserNameParameter = twitterUserName != null ?
                new ObjectParameter("TwitterUserName", twitterUserName) :
                new ObjectParameter("TwitterUserName", typeof(string));
    
            var linkedInUserNameParameter = linkedInUserName != null ?
                new ObjectParameter("LinkedInUserName", linkedInUserName) :
                new ObjectParameter("LinkedInUserName", typeof(string));
    
            var googlePlusUserNameParameter = googlePlusUserName != null ?
                new ObjectParameter("GooglePlusUserName", googlePlusUserName) :
                new ObjectParameter("GooglePlusUserName", typeof(string));
    
            var pInterestUserNameParameter = pInterestUserName != null ?
                new ObjectParameter("PInterestUserName", pInterestUserName) :
                new ObjectParameter("PInterestUserName", typeof(string));
    
            var skypeUsernameParameter = skypeUsername != null ?
                new ObjectParameter("SkypeUsername", skypeUsername) :
                new ObjectParameter("SkypeUsername", typeof(string));
    
            var estimatedCloseDateParameter = estimatedCloseDate.HasValue ?
                new ObjectParameter("EstimatedCloseDate", estimatedCloseDate) :
                new ObjectParameter("EstimatedCloseDate", typeof(System.DateTime));
    
            var nextStepParameter = nextStep != null ?
                new ObjectParameter("NextStep", nextStep) :
                new ObjectParameter("NextStep", typeof(string));
    
            var probabilityParameter = probability != null ?
                new ObjectParameter("Probability", probability) :
                new ObjectParameter("Probability", typeof(string));
    
            var businessTypeParameter = businessType != null ?
                new ObjectParameter("BusinessType", businessType) :
                new ObjectParameter("BusinessType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("crm_UpdateOpportunityDetail", leadIDParameter, lead_NameParameter, titleParameter, phoneParameter, faxParameter, emailParameter, mobileParameter, preferTimeParameter, preferModeParameter, emailOptOutParameter, accountIdParameter, accountNameParameter, webSiteParameter, ownershipParameter, employeesParameter, industryParameter, annualRevenueParameter, ratingParameter, leadStatusParameter, currentApplicationParameter, mailingAddressParameter, mailingstreetParameter, mailingcityParameter, mailingstateParameter, mailingzipParameter, mailingcountryParameter, salesMgr1Parameter, salesMgr2Parameter, officeParameter, modifiedByParameter, descriptionParameter, sourceParameter, leadAssignedParameter, leadStageParameter, facebookUserNameParameter, twitterUserNameParameter, linkedInUserNameParameter, googlePlusUserNameParameter, pInterestUserNameParameter, skypeUsernameParameter, estimatedCloseDateParameter, nextStepParameter, probabilityParameter, businessTypeParameter);
        }
    
        public virtual int CRMDefault_InsertClientDetails(string clientName, byte[] connectionString, string serverName, string companywebsite)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(byte[]));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CRMDefault_InsertClientDetails", clientNameParameter, connectionStringParameter, serverNameParameter, companywebsiteParameter);
        }
    
        public virtual int DELETE_CLIENT(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_CLIENT", clientIDParameter);
        }
    
        public virtual int DELETE_ClientDB(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_ClientDB", clientIDParameter);
        }
    
        public virtual int DELETE_ClientDBNew(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_ClientDBNew", clientIDParameter);
        }
    
        public virtual int DF_CreateCompanyType(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateCompanyType", nameParameter, descriptionParameter);
        }
    
        public virtual int DF_CreateDocument(string documentName, string extension, string path, Nullable<long> folderId, string size, Nullable<bool> isFavourite, Nullable<long> userId, Nullable<int> createdBy)
        {
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(long));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var isFavouriteParameter = isFavourite.HasValue ?
                new ObjectParameter("IsFavourite", isFavourite) :
                new ObjectParameter("IsFavourite", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateDocument", documentNameParameter, extensionParameter, pathParameter, folderIdParameter, sizeParameter, isFavouriteParameter, userIdParameter, createdByParameter);
        }
    
        public virtual int DF_CreateErrorLog(string errorMessage, string error_LineNo, string procedure_Name, string method)
        {
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            var error_LineNoParameter = error_LineNo != null ?
                new ObjectParameter("Error_LineNo", error_LineNo) :
                new ObjectParameter("Error_LineNo", typeof(string));
    
            var procedure_NameParameter = procedure_Name != null ?
                new ObjectParameter("Procedure_Name", procedure_Name) :
                new ObjectParameter("Procedure_Name", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateErrorLog", errorMessageParameter, error_LineNoParameter, procedure_NameParameter, methodParameter);
        }
    
        public virtual int DF_CreateFolder(string folderName, string folderPath, Nullable<int> createdBy, Nullable<bool> isFavourite, Nullable<long> userId)
        {
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isFavouriteParameter = isFavourite.HasValue ?
                new ObjectParameter("IsFavourite", isFavourite) :
                new ObjectParameter("IsFavourite", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateFolder", folderNameParameter, folderPathParameter, createdByParameter, isFavouriteParameter, userIdParameter);
        }
    
        public virtual int DF_CreatePublicDocuments(string documentName, string extension, string path, string size, Nullable<int> createdBy)
        {
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreatePublicDocuments", documentNameParameter, extensionParameter, pathParameter, sizeParameter, createdByParameter);
        }
    
        public virtual int DF_CreateSharedDocuments(string folderId, Nullable<long> documentId, Nullable<long> userId, Nullable<long> sharedBy)
        {
            var folderIdParameter = folderId != null ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(string));
    
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var sharedByParameter = sharedBy.HasValue ?
                new ObjectParameter("SharedBy", sharedBy) :
                new ObjectParameter("SharedBy", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateSharedDocuments", folderIdParameter, documentIdParameter, userIdParameter, sharedByParameter);
        }
    
        public virtual int DF_CreateStatus(string status, string description)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateStatus", statusParameter, descriptionParameter);
        }
    
        public virtual int DF_CreateUserType(string userType, string description)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateUserType", userTypeParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<DF_GetAllCompanyType_Result> DF_GetAllCompanyType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllCompanyType_Result>("DF_GetAllCompanyType");
        }
    
        public virtual ObjectResult<DF_GetAllCompanyTypeById_Result> DF_GetAllCompanyTypeById(Nullable<int> companyTypeId)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllCompanyTypeById_Result>("DF_GetAllCompanyTypeById", companyTypeIdParameter);
        }
    
        public virtual ObjectResult<DF_GetAllDocument_Result> DF_GetAllDocument()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllDocument_Result>("DF_GetAllDocument");
        }
    
        public virtual ObjectResult<DF_GetAllErrorLogs_Result> DF_GetAllErrorLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllErrorLogs_Result>("DF_GetAllErrorLogs");
        }
    
        public virtual ObjectResult<DF_GetAllFolder_Result> DF_GetAllFolder()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllFolder_Result>("DF_GetAllFolder");
        }
    
        public virtual ObjectResult<DF_GetAllPublicDocumets_Result> DF_GetAllPublicDocumets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllPublicDocumets_Result>("DF_GetAllPublicDocumets");
        }
    
        public virtual ObjectResult<DF_GetAllPublicDocumetsById_Result> DF_GetAllPublicDocumetsById(Nullable<long> publicId)
        {
            var publicIdParameter = publicId.HasValue ?
                new ObjectParameter("PublicId", publicId) :
                new ObjectParameter("PublicId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllPublicDocumetsById_Result>("DF_GetAllPublicDocumetsById", publicIdParameter);
        }
    
        public virtual ObjectResult<DF_GetAllSharedDocuments_Result> DF_GetAllSharedDocuments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllSharedDocuments_Result>("DF_GetAllSharedDocuments");
        }
    
        public virtual ObjectResult<DF_GetAllStatus_Result> DF_GetAllStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllStatus_Result>("DF_GetAllStatus");
        }
    
        public virtual ObjectResult<DF_GetAllUsers_Result> DF_GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllUsers_Result>("DF_GetAllUsers");
        }
    
        public virtual ObjectResult<DF_GetAllUserType_Result> DF_GetAllUserType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllUserType_Result>("DF_GetAllUserType");
        }
    
        public virtual ObjectResult<DF_GetAllUserTypeById_Result> DF_GetAllUserTypeById(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetAllUserTypeById_Result>("DF_GetAllUserTypeById", userTypeIdParameter);
        }
    
        public virtual ObjectResult<DF_GetDocumentById_Result> DF_GetDocumentById(Nullable<long> documentId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetDocumentById_Result>("DF_GetDocumentById", documentIdParameter);
        }
    
        public virtual ObjectResult<DF_GetFolderById_Result> DF_GetFolderById(Nullable<long> folderId)
        {
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetFolderById_Result>("DF_GetFolderById", folderIdParameter);
        }
    
        public virtual ObjectResult<DF_GetStatusById_Result> DF_GetStatusById(Nullable<int> statusId)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetStatusById_Result>("DF_GetStatusById", statusIdParameter);
        }
    
        public virtual ObjectResult<DF_GetUsersDetailsById_Result> DF_GetUsersDetailsById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DF_GetUsersDetailsById_Result>("DF_GetUsersDetailsById", idParameter);
        }
    
        public virtual int DF_UpdateCompanyType(Nullable<int> companyTypeId, string name, string description)
        {
            var companyTypeIdParameter = companyTypeId.HasValue ?
                new ObjectParameter("CompanyTypeId", companyTypeId) :
                new ObjectParameter("CompanyTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdateCompanyType", companyTypeIdParameter, nameParameter, descriptionParameter);
        }
    
        public virtual int DF_UpdateDocument(Nullable<long> documentId, string documentName, string extension, string path, Nullable<long> folderId, string size, Nullable<bool> isFavourite, Nullable<long> userId, Nullable<int> modifiedBy)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(long));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(long));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var isFavouriteParameter = isFavourite.HasValue ?
                new ObjectParameter("IsFavourite", isFavourite) :
                new ObjectParameter("IsFavourite", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdateDocument", documentIdParameter, documentNameParameter, extensionParameter, pathParameter, folderIdParameter, sizeParameter, isFavouriteParameter, userIdParameter, modifiedByParameter);
        }
    
        public virtual int DF_UpdateFolder(Nullable<long> folderId, string folderName, string folderPath, Nullable<int> modifiedBy, Nullable<bool> isFavourite, Nullable<long> userId)
        {
            var folderIdParameter = folderId.HasValue ?
                new ObjectParameter("FolderId", folderId) :
                new ObjectParameter("FolderId", typeof(long));
    
            var folderNameParameter = folderName != null ?
                new ObjectParameter("FolderName", folderName) :
                new ObjectParameter("FolderName", typeof(string));
    
            var folderPathParameter = folderPath != null ?
                new ObjectParameter("FolderPath", folderPath) :
                new ObjectParameter("FolderPath", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var isFavouriteParameter = isFavourite.HasValue ?
                new ObjectParameter("IsFavourite", isFavourite) :
                new ObjectParameter("IsFavourite", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdateFolder", folderIdParameter, folderNameParameter, folderPathParameter, modifiedByParameter, isFavouriteParameter, userIdParameter);
        }
    
        public virtual int DF_UpdatePublicDocument(Nullable<long> publicId, string documentName, string extension, string path, string size, Nullable<int> modifiedBy)
        {
            var publicIdParameter = publicId.HasValue ?
                new ObjectParameter("PublicId", publicId) :
                new ObjectParameter("PublicId", typeof(long));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdatePublicDocument", publicIdParameter, documentNameParameter, extensionParameter, pathParameter, sizeParameter, modifiedByParameter);
        }
    
        public virtual int DF_UpdateStatus(Nullable<int> statusId, string status, string description, Nullable<long> isActive)
        {
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdateStatus", statusIdParameter, statusParameter, descriptionParameter, isActiveParameter);
        }
    
        public virtual int DF_UpdateUser(Nullable<int> userId, string userName, string password, string firstName, string lastName, string gender, Nullable<System.DateTime> dOB, string emailAddress, string address, string city, string state, string country, string zip, string about, Nullable<int> userTypeId, Nullable<int> modifiedBy)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var aboutParameter = about != null ?
                new ObjectParameter("About", about) :
                new ObjectParameter("About", typeof(string));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdateUser", userIdParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, genderParameter, dOBParameter, emailAddressParameter, addressParameter, cityParameter, stateParameter, countryParameter, zipParameter, aboutParameter, userTypeIdParameter, modifiedByParameter);
        }
    
        public virtual int DF_UpdateUserType(Nullable<int> userTypeId, string userType, string description)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_UpdateUserType", userTypeIdParameter, userTypeParameter, descriptionParameter);
        }
    
        public virtual int GET_CLIENT_DETAILS(string cLIENTID)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GET_CLIENT_DETAILS", cLIENTIDParameter);
        }
    
        public virtual int UserLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int USP_CREATE_CLIENT(string companyName, string connectionString, string clientID, string serverName, string country, string timesheet_Type, string timesheet, string address1, string address2, string city, string companyphone, string fax, string companywebsite, Nullable<bool> active, Nullable<bool> restoredemodata, string companylogo, string state, string zipcode, Nullable<System.DateTime> createddate, string companytype, Nullable<System.DateTime> expirydate, string superAdminFirstName, string superAdminLastName, string superAdminEmail, string superAdminLoginID, string superAdminPassword, string superAdminPhone, string adminFirstName, string adminLastName, string adminEmail, string adminLoginID, string adminPassword, string adminPhone, string strFuntion, string timeZone)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(string));
    
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var timesheet_TypeParameter = timesheet_Type != null ?
                new ObjectParameter("Timesheet_Type", timesheet_Type) :
                new ObjectParameter("Timesheet_Type", typeof(string));
    
            var timesheetParameter = timesheet != null ?
                new ObjectParameter("Timesheet", timesheet) :
                new ObjectParameter("Timesheet", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var companyphoneParameter = companyphone != null ?
                new ObjectParameter("companyphone", companyphone) :
                new ObjectParameter("companyphone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var restoredemodataParameter = restoredemodata.HasValue ?
                new ObjectParameter("restoredemodata", restoredemodata) :
                new ObjectParameter("restoredemodata", typeof(bool));
    
            var companylogoParameter = companylogo != null ?
                new ObjectParameter("companylogo", companylogo) :
                new ObjectParameter("companylogo", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            var companytypeParameter = companytype != null ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(string));
    
            var expirydateParameter = expirydate.HasValue ?
                new ObjectParameter("expirydate", expirydate) :
                new ObjectParameter("expirydate", typeof(System.DateTime));
    
            var superAdminFirstNameParameter = superAdminFirstName != null ?
                new ObjectParameter("SuperAdminFirstName", superAdminFirstName) :
                new ObjectParameter("SuperAdminFirstName", typeof(string));
    
            var superAdminLastNameParameter = superAdminLastName != null ?
                new ObjectParameter("SuperAdminLastName", superAdminLastName) :
                new ObjectParameter("SuperAdminLastName", typeof(string));
    
            var superAdminEmailParameter = superAdminEmail != null ?
                new ObjectParameter("SuperAdminEmail", superAdminEmail) :
                new ObjectParameter("SuperAdminEmail", typeof(string));
    
            var superAdminLoginIDParameter = superAdminLoginID != null ?
                new ObjectParameter("SuperAdminLoginID", superAdminLoginID) :
                new ObjectParameter("SuperAdminLoginID", typeof(string));
    
            var superAdminPasswordParameter = superAdminPassword != null ?
                new ObjectParameter("SuperAdminPassword", superAdminPassword) :
                new ObjectParameter("SuperAdminPassword", typeof(string));
    
            var superAdminPhoneParameter = superAdminPhone != null ?
                new ObjectParameter("SuperAdminPhone", superAdminPhone) :
                new ObjectParameter("SuperAdminPhone", typeof(string));
    
            var adminFirstNameParameter = adminFirstName != null ?
                new ObjectParameter("AdminFirstName", adminFirstName) :
                new ObjectParameter("AdminFirstName", typeof(string));
    
            var adminLastNameParameter = adminLastName != null ?
                new ObjectParameter("AdminLastName", adminLastName) :
                new ObjectParameter("AdminLastName", typeof(string));
    
            var adminEmailParameter = adminEmail != null ?
                new ObjectParameter("AdminEmail", adminEmail) :
                new ObjectParameter("AdminEmail", typeof(string));
    
            var adminLoginIDParameter = adminLoginID != null ?
                new ObjectParameter("AdminLoginID", adminLoginID) :
                new ObjectParameter("AdminLoginID", typeof(string));
    
            var adminPasswordParameter = adminPassword != null ?
                new ObjectParameter("AdminPassword", adminPassword) :
                new ObjectParameter("AdminPassword", typeof(string));
    
            var adminPhoneParameter = adminPhone != null ?
                new ObjectParameter("AdminPhone", adminPhone) :
                new ObjectParameter("AdminPhone", typeof(string));
    
            var strFuntionParameter = strFuntion != null ?
                new ObjectParameter("strFuntion", strFuntion) :
                new ObjectParameter("strFuntion", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CREATE_CLIENT", companyNameParameter, connectionStringParameter, clientIDParameter, serverNameParameter, countryParameter, timesheet_TypeParameter, timesheetParameter, address1Parameter, address2Parameter, cityParameter, companyphoneParameter, faxParameter, companywebsiteParameter, activeParameter, restoredemodataParameter, companylogoParameter, stateParameter, zipcodeParameter, createddateParameter, companytypeParameter, expirydateParameter, superAdminFirstNameParameter, superAdminLastNameParameter, superAdminEmailParameter, superAdminLoginIDParameter, superAdminPasswordParameter, superAdminPhoneParameter, adminFirstNameParameter, adminLastNameParameter, adminEmailParameter, adminLoginIDParameter, adminPasswordParameter, adminPhoneParameter, strFuntionParameter, timeZoneParameter);
        }
    
        public virtual int USP_CREATE_CLIENT1(string companyName, string connectionString, string clientID, string serverName, string country, string timesheet_Type, string timesheet, string address1, string address2, string city, string companyphone, string fax, string companywebsite, Nullable<bool> active, Nullable<bool> restoredemodata, string companylogo, string state, string zipcode, Nullable<System.DateTime> createddate, string companytype, Nullable<System.DateTime> expirydate, string superAdminFirstName, string superAdminLastName, string superAdminEmail, string superAdminLoginID, string superAdminPassword, string superAdminPhone, string adminFirstName, string adminLastName, string adminEmail, string adminLoginID, string adminPassword, string adminPhone, string strFuntion, string timeZone)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var connectionStringParameter = connectionString != null ?
                new ObjectParameter("ConnectionString", connectionString) :
                new ObjectParameter("ConnectionString", typeof(string));
    
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var timesheet_TypeParameter = timesheet_Type != null ?
                new ObjectParameter("Timesheet_Type", timesheet_Type) :
                new ObjectParameter("Timesheet_Type", typeof(string));
    
            var timesheetParameter = timesheet != null ?
                new ObjectParameter("Timesheet", timesheet) :
                new ObjectParameter("Timesheet", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var companyphoneParameter = companyphone != null ?
                new ObjectParameter("companyphone", companyphone) :
                new ObjectParameter("companyphone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var companywebsiteParameter = companywebsite != null ?
                new ObjectParameter("companywebsite", companywebsite) :
                new ObjectParameter("companywebsite", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            var restoredemodataParameter = restoredemodata.HasValue ?
                new ObjectParameter("restoredemodata", restoredemodata) :
                new ObjectParameter("restoredemodata", typeof(bool));
    
            var companylogoParameter = companylogo != null ?
                new ObjectParameter("companylogo", companylogo) :
                new ObjectParameter("companylogo", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            var companytypeParameter = companytype != null ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(string));
    
            var expirydateParameter = expirydate.HasValue ?
                new ObjectParameter("expirydate", expirydate) :
                new ObjectParameter("expirydate", typeof(System.DateTime));
    
            var superAdminFirstNameParameter = superAdminFirstName != null ?
                new ObjectParameter("SuperAdminFirstName", superAdminFirstName) :
                new ObjectParameter("SuperAdminFirstName", typeof(string));
    
            var superAdminLastNameParameter = superAdminLastName != null ?
                new ObjectParameter("SuperAdminLastName", superAdminLastName) :
                new ObjectParameter("SuperAdminLastName", typeof(string));
    
            var superAdminEmailParameter = superAdminEmail != null ?
                new ObjectParameter("SuperAdminEmail", superAdminEmail) :
                new ObjectParameter("SuperAdminEmail", typeof(string));
    
            var superAdminLoginIDParameter = superAdminLoginID != null ?
                new ObjectParameter("SuperAdminLoginID", superAdminLoginID) :
                new ObjectParameter("SuperAdminLoginID", typeof(string));
    
            var superAdminPasswordParameter = superAdminPassword != null ?
                new ObjectParameter("SuperAdminPassword", superAdminPassword) :
                new ObjectParameter("SuperAdminPassword", typeof(string));
    
            var superAdminPhoneParameter = superAdminPhone != null ?
                new ObjectParameter("SuperAdminPhone", superAdminPhone) :
                new ObjectParameter("SuperAdminPhone", typeof(string));
    
            var adminFirstNameParameter = adminFirstName != null ?
                new ObjectParameter("AdminFirstName", adminFirstName) :
                new ObjectParameter("AdminFirstName", typeof(string));
    
            var adminLastNameParameter = adminLastName != null ?
                new ObjectParameter("AdminLastName", adminLastName) :
                new ObjectParameter("AdminLastName", typeof(string));
    
            var adminEmailParameter = adminEmail != null ?
                new ObjectParameter("AdminEmail", adminEmail) :
                new ObjectParameter("AdminEmail", typeof(string));
    
            var adminLoginIDParameter = adminLoginID != null ?
                new ObjectParameter("AdminLoginID", adminLoginID) :
                new ObjectParameter("AdminLoginID", typeof(string));
    
            var adminPasswordParameter = adminPassword != null ?
                new ObjectParameter("AdminPassword", adminPassword) :
                new ObjectParameter("AdminPassword", typeof(string));
    
            var adminPhoneParameter = adminPhone != null ?
                new ObjectParameter("AdminPhone", adminPhone) :
                new ObjectParameter("AdminPhone", typeof(string));
    
            var strFuntionParameter = strFuntion != null ?
                new ObjectParameter("strFuntion", strFuntion) :
                new ObjectParameter("strFuntion", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("TimeZone", timeZone) :
                new ObjectParameter("TimeZone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CREATE_CLIENT1", companyNameParameter, connectionStringParameter, clientIDParameter, serverNameParameter, countryParameter, timesheet_TypeParameter, timesheetParameter, address1Parameter, address2Parameter, cityParameter, companyphoneParameter, faxParameter, companywebsiteParameter, activeParameter, restoredemodataParameter, companylogoParameter, stateParameter, zipcodeParameter, createddateParameter, companytypeParameter, expirydateParameter, superAdminFirstNameParameter, superAdminLastNameParameter, superAdminEmailParameter, superAdminLoginIDParameter, superAdminPasswordParameter, superAdminPhoneParameter, adminFirstNameParameter, adminLastNameParameter, adminEmailParameter, adminLoginIDParameter, adminPasswordParameter, adminPhoneParameter, strFuntionParameter, timeZoneParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Usp_Custom_Manage_Master(Nullable<long> fieldId, Nullable<long> userID, string module, Nullable<int> column_Id, string actualColumnName, string column_Label, string column_Description, string hoverText, string column_Type, string inputDataType, string defaultValue, Nullable<int> maxLength, Nullable<int> requiredField, Nullable<int> isActive, Nullable<int> flag)
        {
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var column_IdParameter = column_Id.HasValue ?
                new ObjectParameter("Column_Id", column_Id) :
                new ObjectParameter("Column_Id", typeof(int));
    
            var actualColumnNameParameter = actualColumnName != null ?
                new ObjectParameter("ActualColumnName", actualColumnName) :
                new ObjectParameter("ActualColumnName", typeof(string));
    
            var column_LabelParameter = column_Label != null ?
                new ObjectParameter("Column_Label", column_Label) :
                new ObjectParameter("Column_Label", typeof(string));
    
            var column_DescriptionParameter = column_Description != null ?
                new ObjectParameter("Column_Description", column_Description) :
                new ObjectParameter("Column_Description", typeof(string));
    
            var hoverTextParameter = hoverText != null ?
                new ObjectParameter("HoverText", hoverText) :
                new ObjectParameter("HoverText", typeof(string));
    
            var column_TypeParameter = column_Type != null ?
                new ObjectParameter("Column_Type", column_Type) :
                new ObjectParameter("Column_Type", typeof(string));
    
            var inputDataTypeParameter = inputDataType != null ?
                new ObjectParameter("InputDataType", inputDataType) :
                new ObjectParameter("InputDataType", typeof(string));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            var maxLengthParameter = maxLength.HasValue ?
                new ObjectParameter("MaxLength", maxLength) :
                new ObjectParameter("MaxLength", typeof(int));
    
            var requiredFieldParameter = requiredField.HasValue ?
                new ObjectParameter("RequiredField", requiredField) :
                new ObjectParameter("RequiredField", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Usp_Custom_Manage_Master", fieldIdParameter, userIDParameter, moduleParameter, column_IdParameter, actualColumnNameParameter, column_LabelParameter, column_DescriptionParameter, hoverTextParameter, column_TypeParameter, inputDataTypeParameter, defaultValueParameter, maxLengthParameter, requiredFieldParameter, isActiveParameter, flagParameter);
        }
    
        public virtual ObjectResult<Usp_Custom_Manage_Value_Master_Result> Usp_Custom_Manage_Value_Master(Nullable<long> cValueId, Nullable<long> userID, string module, Nullable<long> moduleRecordId, Nullable<long> moduleRecordIdTmp, string query, Nullable<int> flag)
        {
            var cValueIdParameter = cValueId.HasValue ?
                new ObjectParameter("CValueId", cValueId) :
                new ObjectParameter("CValueId", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var moduleRecordIdParameter = moduleRecordId.HasValue ?
                new ObjectParameter("ModuleRecordId", moduleRecordId) :
                new ObjectParameter("ModuleRecordId", typeof(long));
    
            var moduleRecordIdTmpParameter = moduleRecordIdTmp.HasValue ?
                new ObjectParameter("ModuleRecordIdTmp", moduleRecordIdTmp) :
                new ObjectParameter("ModuleRecordIdTmp", typeof(long));
    
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Usp_Custom_Manage_Value_Master_Result>("Usp_Custom_Manage_Value_Master", cValueIdParameter, userIDParameter, moduleParameter, moduleRecordIdParameter, moduleRecordIdTmpParameter, queryParameter, flagParameter);
        }
    
        public virtual int USP_EXECUTE_SCRIPT(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_EXECUTE_SCRIPT", clientIDParameter);
        }
    
        public virtual int USP_GET_ACTIVE_CLIENTS(string sITE_TYPE)
        {
            var sITE_TYPEParameter = sITE_TYPE != null ?
                new ObjectParameter("SITE_TYPE", sITE_TYPE) :
                new ObjectParameter("SITE_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GET_ACTIVE_CLIENTS", sITE_TYPEParameter);
        }
    
        public virtual int USP_GET_ALL_Client()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GET_ALL_Client");
        }
    
        public virtual int USP_GET_ClientDetail(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GET_ClientDetail", clientIDParameter);
        }
    
        public virtual int USP_GET_DASHBOARD_DATA()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GET_DASHBOARD_DATA");
        }
    
        public virtual int USP_GET_SITE_DETAILS_CLIENTID(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_GET_SITE_DETAILS_CLIENTID", clientIDParameter);
        }
    
        public virtual int USP_Validate_Client(string clientID)
        {
            var clientIDParameter = clientID != null ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Validate_Client", clientIDParameter);
        }
    
        public virtual int USP_VALIDATE_CLIENT_EXPIRY(string cLIENTID)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_VALIDATE_CLIENT_EXPIRY", cLIENTIDParameter);
        }
    
        public virtual int USP_VALIDATE_CLIENT_EXPIRY_BY_TYPE(string cLIENTID, string sITE_TYPE)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            var sITE_TYPEParameter = sITE_TYPE != null ?
                new ObjectParameter("SITE_TYPE", sITE_TYPE) :
                new ObjectParameter("SITE_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_VALIDATE_CLIENT_EXPIRY_BY_TYPE", cLIENTIDParameter, sITE_TYPEParameter);
        }
    
        public virtual int VALIDATE_CLIENT(string cLIENTID)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VALIDATE_CLIENT", cLIENTIDParameter);
        }
    
        public virtual int VALIDATE_CLIENT_BY_TYPE(string cLIENTID, string sITE_TYPE)
        {
            var cLIENTIDParameter = cLIENTID != null ?
                new ObjectParameter("CLIENTID", cLIENTID) :
                new ObjectParameter("CLIENTID", typeof(string));
    
            var sITE_TYPEParameter = sITE_TYPE != null ?
                new ObjectParameter("SITE_TYPE", sITE_TYPE) :
                new ObjectParameter("SITE_TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VALIDATE_CLIENT_BY_TYPE", cLIENTIDParameter, sITE_TYPEParameter);
        }
    
        public virtual int DF_DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_DeleteUser", userIdParameter);
        }
    
        public virtual int DF_DeleteUserType(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_DeleteUserType", userTypeIdParameter);
        }
    
        public virtual int DF_CreateUser(string userName, string password, string firstName, string lastName, string gender, Nullable<System.DateTime> dOB, string skills, string emailAddress, string address, string city, string state, string country, string zip, byte[] profilePic, string about, Nullable<int> userTypeId, Nullable<int> createdBy)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var skillsParameter = skills != null ?
                new ObjectParameter("Skills", skills) :
                new ObjectParameter("Skills", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var profilePicParameter = profilePic != null ?
                new ObjectParameter("ProfilePic", profilePic) :
                new ObjectParameter("ProfilePic", typeof(byte[]));
    
            var aboutParameter = about != null ?
                new ObjectParameter("About", about) :
                new ObjectParameter("About", typeof(string));
    
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("UserTypeId", userTypeId) :
                new ObjectParameter("UserTypeId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DF_CreateUser", userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, genderParameter, dOBParameter, skillsParameter, emailAddressParameter, addressParameter, cityParameter, stateParameter, countryParameter, zipParameter, profilePicParameter, aboutParameter, userTypeIdParameter, createdByParameter);
        }
    }
}
